/* eslint-disable func-names */
import { PluginItem } from '@babel/core';

// * AST - абстрактное синтаксическое дерево;

/**
 * Удаляет из продакшен-сборки ненужные атрибуты для элементов (datatest-id и так далее);
 * @returns PluginItem
 */
export default function (): PluginItem {
    // ? Написание babel-плагинов похоже на написание eslint-плагинов, здесь так же происходит работа с нодами абстрактного синтаксического дерева;
    return {
        // ? Свойство visitor содержит обработчик для Program в AST (представляет абстрактное представление кода);
        visitor: {
            // ? Нода Program нужна для того, чтобы прокидывает в плагин какие-либо пропсы (атрибуты, которые нужно убрать из продакшен-сборки);
            Program(path, state) {
                // ? Извлекается массив запрещенных идентификаторов (JSX-компонентов) из параметров плагина. Если параметры не определены, используется пустой массив;
                const forbidden = state.opts.props || [];

                // ? Происходит обход AST. Для каждого идентификатора JSX выполняется функция обратного вызова;
                path.traverse({
                    JSXIdentifier(current) {
                        // ? Получается имя текущего идентификатора JSX;
                        const nodeName = current.node.name;

                        // ? Если имя идентификатора находится в массиве запрещенных, то удаляется родительский элемент из AST;
                        if (forbidden.includes(nodeName)) {
                            current.parentPath.remove();
                        }
                    },
                });
            },
        },
    };
}
